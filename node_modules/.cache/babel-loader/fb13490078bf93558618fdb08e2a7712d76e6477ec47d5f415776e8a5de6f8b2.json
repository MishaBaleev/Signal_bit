{"ast":null,"code":"\"use strict\";\n\nvar window = require('global/window');\nvar httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {\n  if (decodeResponseBody === void 0) {\n    decodeResponseBody = false;\n  }\n  return function (err, response, responseBody) {\n    // if the XHR failed, return that error\n    if (err) {\n      callback(err);\n      return;\n    } // if the HTTP status code is 4xx or 5xx, the request also failed\n\n    if (response.statusCode >= 400 && response.statusCode <= 599) {\n      var cause = responseBody;\n      if (decodeResponseBody) {\n        if (window.TextDecoder) {\n          var charset = getCharset(response.headers && response.headers['content-type']);\n          try {\n            cause = new TextDecoder(charset).decode(responseBody);\n          } catch (e) {}\n        } else {\n          cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));\n        }\n      }\n      callback({\n        cause: cause\n      });\n      return;\n    } // otherwise, request succeeded\n\n    callback(null, responseBody);\n  };\n};\nfunction getCharset(contentTypeHeader) {\n  if (contentTypeHeader === void 0) {\n    contentTypeHeader = '';\n  }\n  return contentTypeHeader.toLowerCase().split(';').reduce(function (charset, contentType) {\n    var _contentType$split = contentType.split('='),\n      type = _contentType$split[0],\n      value = _contentType$split[1];\n    if (type.trim() === 'charset') {\n      return value.trim();\n    }\n    return charset;\n  }, 'utf-8');\n}\nmodule.exports = httpResponseHandler;","map":{"version":3,"names":["window","require","httpResponseHandler","callback","decodeResponseBody","err","response","responseBody","statusCode","cause","TextDecoder","charset","getCharset","headers","decode","e","String","fromCharCode","apply","Uint8Array","contentTypeHeader","toLowerCase","split","reduce","contentType","_contentType$split","type","value","trim","module","exports"],"sources":["/Users/mihailbaleev/Documents/GitHub/signal-BIT/signal/node_modules/@videojs/xhr/lib/http-handler.js"],"sourcesContent":["\"use strict\";\n\nvar window = require('global/window');\n\nvar httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {\n  if (decodeResponseBody === void 0) {\n    decodeResponseBody = false;\n  }\n\n  return function (err, response, responseBody) {\n    // if the XHR failed, return that error\n    if (err) {\n      callback(err);\n      return;\n    } // if the HTTP status code is 4xx or 5xx, the request also failed\n\n\n    if (response.statusCode >= 400 && response.statusCode <= 599) {\n      var cause = responseBody;\n\n      if (decodeResponseBody) {\n        if (window.TextDecoder) {\n          var charset = getCharset(response.headers && response.headers['content-type']);\n\n          try {\n            cause = new TextDecoder(charset).decode(responseBody);\n          } catch (e) {}\n        } else {\n          cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));\n        }\n      }\n\n      callback({\n        cause: cause\n      });\n      return;\n    } // otherwise, request succeeded\n\n\n    callback(null, responseBody);\n  };\n};\n\nfunction getCharset(contentTypeHeader) {\n  if (contentTypeHeader === void 0) {\n    contentTypeHeader = '';\n  }\n\n  return contentTypeHeader.toLowerCase().split(';').reduce(function (charset, contentType) {\n    var _contentType$split = contentType.split('='),\n        type = _contentType$split[0],\n        value = _contentType$split[1];\n\n    if (type.trim() === 'charset') {\n      return value.trim();\n    }\n\n    return charset;\n  }, 'utf-8');\n}\n\nmodule.exports = httpResponseHandler;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AAErC,IAAIC,mBAAmB,GAAG,SAASA,mBAAmBA,CAACC,QAAQ,EAAEC,kBAAkB,EAAE;EACnF,IAAIA,kBAAkB,KAAK,KAAK,CAAC,EAAE;IACjCA,kBAAkB,GAAG,KAAK;EAC5B;EAEA,OAAO,UAAUC,GAAG,EAAEC,QAAQ,EAAEC,YAAY,EAAE;IAC5C;IACA,IAAIF,GAAG,EAAE;MACPF,QAAQ,CAACE,GAAG,CAAC;MACb;IACF,CAAC,CAAC;;IAGF,IAAIC,QAAQ,CAACE,UAAU,IAAI,GAAG,IAAIF,QAAQ,CAACE,UAAU,IAAI,GAAG,EAAE;MAC5D,IAAIC,KAAK,GAAGF,YAAY;MAExB,IAAIH,kBAAkB,EAAE;QACtB,IAAIJ,MAAM,CAACU,WAAW,EAAE;UACtB,IAAIC,OAAO,GAAGC,UAAU,CAACN,QAAQ,CAACO,OAAO,IAAIP,QAAQ,CAACO,OAAO,CAAC,cAAc,CAAC,CAAC;UAE9E,IAAI;YACFJ,KAAK,GAAG,IAAIC,WAAW,CAACC,OAAO,CAAC,CAACG,MAAM,CAACP,YAAY,CAAC;UACvD,CAAC,CAAC,OAAOQ,CAAC,EAAE,CAAC;QACf,CAAC,MAAM;UACLN,KAAK,GAAGO,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,UAAU,CAACZ,YAAY,CAAC,CAAC;QACvE;MACF;MAEAJ,QAAQ,CAAC;QACPM,KAAK,EAAEA;MACT,CAAC,CAAC;MACF;IACF,CAAC,CAAC;;IAGFN,QAAQ,CAAC,IAAI,EAAEI,YAAY,CAAC;EAC9B,CAAC;AACH,CAAC;AAED,SAASK,UAAUA,CAACQ,iBAAiB,EAAE;EACrC,IAAIA,iBAAiB,KAAK,KAAK,CAAC,EAAE;IAChCA,iBAAiB,GAAG,EAAE;EACxB;EAEA,OAAOA,iBAAiB,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,UAAUZ,OAAO,EAAEa,WAAW,EAAE;IACvF,IAAIC,kBAAkB,GAAGD,WAAW,CAACF,KAAK,CAAC,GAAG,CAAC;MAC3CI,IAAI,GAAGD,kBAAkB,CAAC,CAAC,CAAC;MAC5BE,KAAK,GAAGF,kBAAkB,CAAC,CAAC,CAAC;IAEjC,IAAIC,IAAI,CAACE,IAAI,CAAC,CAAC,KAAK,SAAS,EAAE;MAC7B,OAAOD,KAAK,CAACC,IAAI,CAAC,CAAC;IACrB;IAEA,OAAOjB,OAAO;EAChB,CAAC,EAAE,OAAO,CAAC;AACb;AAEAkB,MAAM,CAACC,OAAO,GAAG5B,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}