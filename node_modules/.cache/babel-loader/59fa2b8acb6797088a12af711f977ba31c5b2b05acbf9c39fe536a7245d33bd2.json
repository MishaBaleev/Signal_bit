{"ast":null,"code":"/*! @name mpd-parser @version 1.3.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\nvar version = \"1.3.0\";\nconst isObject = obj => {\n  return !!obj && typeof obj === 'object';\n};\nconst merge = (...objects) => {\n  return objects.reduce((result, source) => {\n    if (typeof source !== 'object') {\n      return result;\n    }\n    Object.keys(source).forEach(key => {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nconst values = o => Object.keys(o).map(k => o[k]);\nconst range = (start, end) => {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n};\nconst flatten = lists => lists.reduce((x, y) => x.concat(y), []);\nconst from = list => {\n  if (!list.length) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n  return result;\n};\nconst findIndexes = (l, key) => l.reduce((a, e, i) => {\n  if (e[key]) {\n    a.push(i);\n  }\n  return a;\n}, []);\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nconst union = (lists, keyFunction) => {\n  return values(lists.reduce((acc, list) => {\n    list.forEach(el => {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  INVALID_NUMBER_OF_CONTENT_STEERING: 'INVALID_NUMBER_OF_CONTENT_STEERING',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nconst urlTypeToSegment = ({\n  baseUrl = '',\n  source = '',\n  range = '',\n  indexRange = ''\n}) => {\n  const segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n  if (range || indexRange) {\n    const rangeStr = range ? range : indexRange;\n    const ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    let startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    let endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n    let length;\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length,\n      offset: startRange\n    };\n  }\n  return segment;\n};\nconst byteRangeToString = byterange => {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  let endRange;\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n  return `${byterange.offset}-${endRange}`;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nconst parseEndNumber = endNumber => {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n  if (isNaN(endNumber)) {\n    return null;\n  }\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\nconst segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static(attributes) {\n    const {\n      duration,\n      timescale = 1,\n      sourceDuration,\n      periodDuration\n    } = attributes;\n    const endNumber = parseEndNumber(attributes.endNumber);\n    const segmentDuration = duration / timescale;\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic(attributes) {\n    const {\n      NOW,\n      clientOffset,\n      availabilityStartTime,\n      timescale = 1,\n      duration,\n      periodStart = 0,\n      minimumUpdatePeriod = 0,\n      timeShiftBufferDepth = Infinity\n    } = attributes;\n    const endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    const now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    const periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    const periodEndWC = now + minimumUpdatePeriod;\n    const periodDuration = periodEndWC - periodStartWC;\n    const segmentCount = Math.ceil(periodDuration * timescale / duration);\n    const availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    const availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nconst toSegments = attributes => number => {\n  const {\n    duration,\n    timescale = 1,\n    periodStart,\n    startNumber = 1\n  } = attributes;\n  return {\n    number: startNumber + number,\n    duration: duration / timescale,\n    timeline: periodStart,\n    time: number * duration\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseByDuration = attributes => {\n  const {\n    type,\n    duration,\n    timescale = 1,\n    periodDuration,\n    sourceDuration\n  } = attributes;\n  const {\n    start,\n    end\n  } = segmentRange[type](attributes);\n  const segments = range(start, end).map(toSegments(attributes));\n  if (type === 'static') {\n    const index = segments.length - 1; // section is either a period or the full source\n\n    const sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nconst segmentsFromBase = attributes => {\n  const {\n    baseUrl,\n    initialization = {},\n    sourceDuration,\n    indexRange = '',\n    periodStart,\n    presentationTime,\n    number = 0,\n    duration\n  } = attributes; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n  const initSegment = urlTypeToSegment({\n    baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  const segment = urlTypeToSegment({\n    baseUrl,\n    source: baseUrl,\n    indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    const segmentTimeInfo = parseByDuration(attributes);\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nconst addSidxSegmentsToPlaylist$1 = (playlist, sidx, baseUrl) => {\n  // Retain init segment information\n  const initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  const sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  const timeline = playlist.timeline || 0;\n  const sidxByteRange = playlist.sidx.byterange;\n  const sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  const timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  const mediaReferences = sidx.references.filter(r => r.referenceType !== 1);\n  const segments = [];\n  const type = playlist.endList ? 'static' : 'dynamic';\n  const periodStart = playlist.sidx.timeline;\n  let presentationTime = periodStart;\n  let number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  let startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n  for (let i = 0; i < mediaReferences.length; i++) {\n    const reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    const size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    const duration = reference.subsegmentDuration; // should be an inclusive range\n\n    let endIndex; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n    const indexRange = `${startIndex}-${endIndex}`;\n    const attributes = {\n      baseUrl,\n      timescale,\n      timeline,\n      periodStart,\n      presentationTime,\n      number,\n      duration,\n      sourceDuration,\n      indexRange,\n      type\n    };\n    const segment = segmentsFromBase(attributes)[0];\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n    segments.push(segment);\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n    presentationTime += duration / timescale;\n    number++;\n  }\n  playlist.segments = segments;\n  return playlist;\n};\nconst SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nconst TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nconst getUniqueTimelineStarts = timelineStarts => {\n  return union(timelineStarts, ({\n    timeline\n  }) => timeline).sort((a, b) => a.timeline > b.timeline ? 1 : -1);\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nconst findPlaylistWithName = (playlists, name) => {\n  for (let i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nconst getMediaGroupPlaylists = manifest => {\n  let mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, (properties, type, group, label) => {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nconst updateMediaSequenceForPlaylist = ({\n  playlist,\n  mediaSequence\n}) => {\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach((segment, index) => {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nconst updateSequenceNumbers = ({\n  oldPlaylists,\n  newPlaylists,\n  timelineStarts\n}) => {\n  newPlaylists.forEach(playlist => {\n    playlist.discontinuitySequence = timelineStarts.findIndex(function ({\n      timeline\n    }) {\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    const oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n    const firstNewSegment = playlist.segments[0];\n    const oldMatchingSegmentIndex = oldPlaylist.segments.findIndex(function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n    const oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n    updateMediaSequenceForPlaylist({\n      playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nconst positionManifestOnTimeline = ({\n  oldManifest,\n  newManifest\n}) => {\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  const oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  const newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists,\n    newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\nconst generateSidxKey = sidx => sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\nconst mergeDiscontiguousPlaylists = playlists => {\n  // Break out playlists into groups based on their baseUrl\n  const playlistsByBaseUrl = playlists.reduce(function (acc, cur) {\n    if (!acc[cur.attributes.baseUrl]) {\n      acc[cur.attributes.baseUrl] = [];\n    }\n    acc[cur.attributes.baseUrl].push(cur);\n    return acc;\n  }, {});\n  let allPlaylists = [];\n  Object.values(playlistsByBaseUrl).forEach(playlistGroup => {\n    const mergedPlaylists = values(playlistGroup.reduce((acc, playlist) => {\n      // assuming playlist IDs are the same across periods\n      // TODO: handle multiperiod where representation sets are not the same\n      // across periods\n      const name = playlist.attributes.id + (playlist.attributes.lang || '');\n      if (!acc[name]) {\n        // First Period\n        acc[name] = playlist;\n        acc[name].attributes.timelineStarts = [];\n      } else {\n        // Subsequent Periods\n        if (playlist.segments) {\n          // first segment of subsequent periods signal a discontinuity\n          if (playlist.segments[0]) {\n            playlist.segments[0].discontinuity = true;\n          }\n          acc[name].segments.push(...playlist.segments);\n        } // bubble up contentProtection, this assumes all DRM content\n        // has the same contentProtection\n\n        if (playlist.attributes.contentProtection) {\n          acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n        }\n      }\n      acc[name].attributes.timelineStarts.push({\n        // Although they represent the same number, it's important to have both to make it\n        // compatible with HLS potentially having a similar attribute.\n        start: playlist.attributes.periodStart,\n        timeline: playlist.attributes.periodStart\n      });\n      return acc;\n    }, {}));\n    allPlaylists = allPlaylists.concat(mergedPlaylists);\n  });\n  return allPlaylists.map(playlist => {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\nconst addSidxSegmentsToPlaylist = (playlist, sidxMapping) => {\n  const sidxKey = generateSidxKey(playlist.sidx);\n  const sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n  return playlist;\n};\nconst addSidxSegmentsToPlaylists = (playlists, sidxMapping = {}) => {\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n  for (const i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n  return playlists;\n};\nconst formatAudioPlaylist = ({\n  attributes,\n  segments,\n  sidx,\n  mediaSequence,\n  discontinuitySequence,\n  discontinuityStarts\n}, isAudioOnly) => {\n  const playlist = {\n    attributes: {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs,\n      ['PROGRAM-ID']: 1\n    },\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuitySequence,\n    discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence,\n    segments\n  };\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n  return playlist;\n};\nconst formatVttPlaylist = ({\n  attributes,\n  segments,\n  mediaSequence,\n  discontinuityStarts,\n  discontinuitySequence\n}) => {\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n  const m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth,\n    ['PROGRAM-ID']: 1\n  };\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n  const vttPlaylist = {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts,\n    discontinuitySequence,\n    mediaSequence,\n    segments\n  };\n  if (attributes.serviceLocation) {\n    vttPlaylist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n  return vttPlaylist;\n};\nconst organizeAudioPlaylists = (playlists, sidxMapping = {}, isAudioOnly = false) => {\n  let mainPlaylist;\n  const formattedPlaylists = playlists.reduce((a, playlist) => {\n    const role = playlist.attributes.role && playlist.attributes.role.value || '';\n    const language = playlist.attributes.lang || '';\n    let label = playlist.attributes.label || 'main';\n    if (language && !playlist.attributes.label) {\n      const roleLabel = role ? ` (${role})` : '';\n      label = `${playlist.attributes.lang}${roleLabel}`;\n    }\n    if (!a[label]) {\n      a[label] = {\n        language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n    const formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    const firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n  return formattedPlaylists;\n};\nconst organizeVttPlaylists = (playlists, sidxMapping = {}) => {\n  return playlists.reduce((a, playlist) => {\n    const label = playlist.attributes.label || playlist.attributes.lang || 'text';\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\nconst organizeCaptionServices = captionServices => captionServices.reduce((svcObj, svc) => {\n  if (!svc) {\n    return svcObj;\n  }\n  svc.forEach(service => {\n    const {\n      channel,\n      language\n    } = service;\n    svcObj[language] = {\n      autoselect: false,\n      default: false,\n      instreamId: channel,\n      language\n    };\n    if (service.hasOwnProperty('aspectRatio')) {\n      svcObj[language].aspectRatio = service.aspectRatio;\n    }\n    if (service.hasOwnProperty('easyReader')) {\n      svcObj[language].easyReader = service.easyReader;\n    }\n    if (service.hasOwnProperty('3D')) {\n      svcObj[language]['3D'] = service['3D'];\n    }\n  });\n  return svcObj;\n}, {});\nconst formatVideoPlaylist = ({\n  attributes,\n  segments,\n  sidx,\n  discontinuityStarts\n}) => {\n  const playlist = {\n    attributes: {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth,\n      ['PROGRAM-ID']: 1\n    },\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments\n  };\n  if (attributes.frameRate) {\n    playlist.attributes['FRAME-RATE'] = attributes.frameRate;\n  }\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n  return playlist;\n};\nconst videoOnly = ({\n  attributes\n}) => attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\nconst audioOnly = ({\n  attributes\n}) => attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\nconst vttOnly = ({\n  attributes\n}) => attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\nconst addMediaSequenceValues = (playlists, timelineStarts) => {\n  // increment all segments sequentially\n  playlists.forEach(playlist => {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = timelineStarts.findIndex(function ({\n      timeline\n    }) {\n      return timeline === playlist.timeline;\n    });\n    if (!playlist.segments) {\n      return;\n    }\n    playlist.segments.forEach((segment, index) => {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nconst flattenMediaGroupPlaylists = mediaGroupObject => {\n  if (!mediaGroupObject) {\n    return [];\n  }\n  return Object.keys(mediaGroupObject).reduce((acc, label) => {\n    const labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nconst toM3u8 = ({\n  dashPlaylists,\n  locations,\n  contentSteering,\n  sidxMapping = {},\n  previousManifest,\n  eventStream\n}) => {\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n  const {\n    sourceDuration: duration,\n    type,\n    suggestedPresentationDelay,\n    minimumUpdatePeriod\n  } = dashPlaylists[0].attributes;\n  const videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  const audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  const vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  const captions = dashPlaylists.map(playlist => playlist.attributes.captionServices).filter(Boolean);\n  const manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: {\n      AUDIO: {},\n      VIDEO: {},\n      ['CLOSED-CAPTIONS']: {},\n      SUBTITLES: {}\n    },\n    uri: '',\n    duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n  if (locations) {\n    manifest.locations = locations;\n  }\n  if (contentSteering) {\n    manifest.contentSteering = contentSteering;\n  }\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n  if (eventStream && eventStream.length > 0) {\n    manifest.eventStream = eventStream;\n  }\n  const isAudioOnly = manifest.playlists.length === 0;\n  const organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  const organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  const formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  const playlistTimelineStarts = formattedPlaylists.map(({\n    timelineStarts\n  }) => timelineStarts);\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nconst getLiveRValue = (attributes, time, duration) => {\n  const {\n    NOW,\n    clientOffset,\n    availabilityStartTime,\n    timescale = 1,\n    periodStart = 0,\n    minimumUpdatePeriod = 0\n  } = attributes;\n  const now = (NOW + clientOffset) / 1000;\n  const periodStartWC = availabilityStartTime + periodStart;\n  const periodEndWC = now + minimumUpdatePeriod;\n  const periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseByTimeline = (attributes, segmentTimeline) => {\n  const {\n    type,\n    minimumUpdatePeriod = 0,\n    media = '',\n    sourceDuration,\n    timescale = 1,\n    startNumber = 1,\n    periodStart: timeline\n  } = attributes;\n  const segments = [];\n  let time = -1;\n  for (let sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    const S = segmentTimeline[sIndex];\n    const duration = S.d;\n    const repeat = S.r || 0;\n    const segmentTime = S.t || 0;\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n    let count;\n    if (repeat < 0) {\n      const nextS = sIndex + 1;\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n    const end = startNumber + segments.length + count;\n    let number = startNumber + segments.length;\n    while (number < end) {\n      segments.push({\n        number,\n        duration: duration / timescale,\n        time,\n        timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n  return segments;\n};\nconst identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nconst identifierReplacement = values => (match, identifier, format, width) => {\n  if (match === '$$') {\n    // escape sequence\n    return '$';\n  }\n  if (typeof values[identifier] === 'undefined') {\n    return match;\n  }\n  const value = '' + values[identifier];\n  if (identifier === 'RepresentationID') {\n    // Format tag shall not be present with RepresentationID\n    return value;\n  }\n  if (!format) {\n    width = 1;\n  } else {\n    width = parseInt(width, 10);\n  }\n  if (value.length >= width) {\n    return value;\n  }\n  return `${new Array(width - value.length + 1).join('0')}${value}`;\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nconst constructTemplateUrl = (url, values) => url.replace(identifierPattern, identifierReplacement(values));\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseTemplateInfo = (attributes, segmentTimeline) => {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nconst segmentsFromTemplate = (attributes, segmentTimeline) => {\n  const templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  const {\n    initialization = {\n      sourceURL: '',\n      range: ''\n    }\n  } = attributes;\n  const mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  const segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(segment => {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    const uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    const presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    const presentationTime =\n    // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    const map = {\n      uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nconst SegmentURLToSegmentObject = (attributes, segmentUrl) => {\n  const {\n    baseUrl,\n    initialization = {}\n  } = attributes;\n  const initSegment = urlTypeToSegment({\n    baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  const segment = urlTypeToSegment({\n    baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\nconst segmentsFromList = (attributes, segmentTimeline) => {\n  const {\n    duration,\n    segmentUrls = [],\n    periodStart\n  } = attributes; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n  const segmentUrlMap = segmentUrls.map(segmentUrlObject => SegmentURLToSegmentObject(attributes, segmentUrlObject));\n  let segmentTimeInfo;\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n  const segments = segmentTimeInfo.map((segmentTime, index) => {\n    if (segmentUrlMap[index]) {\n      const segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      const presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n  }).filter(segment => segment);\n  return segments;\n};\nconst generateSegments = ({\n  attributes,\n  segmentInfo\n}) => {\n  let segmentAttributes;\n  let segmentsFn;\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n  const segmentsInfo = {\n    attributes\n  };\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n  const segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    const {\n      duration,\n      timescale = 1\n    } = segmentAttributes;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce((max, segment) => {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n  return segmentsInfo;\n};\nconst toPlaylists = representations => representations.map(generateSegments);\nconst findChildren = (element, name) => from(element.childNodes).filter(({\n  tagName\n}) => tagName === name);\nconst getContent = element => element.textContent.trim();\n\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */\nconst parseDivisionValue = value => {\n  return parseFloat(value.split('/').reduce((prev, current) => prev / current));\n};\nconst parseDuration = str => {\n  const SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  const SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  const SECONDS_IN_DAY = 24 * 60 * 60;\n  const SECONDS_IN_HOUR = 60 * 60;\n  const SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  const durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  const match = durationRegex.exec(str);\n  if (!match) {\n    return 0;\n  }\n  const [year, month, day, hour, minute, second] = match.slice(1);\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nconst parseDate = str => {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  const dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n  return Date.parse(str);\n};\nconst parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type(value) {\n    return value;\n  },\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */\n  frameRate(value) {\n    return parseDivisionValue(value);\n  },\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration(value) {\n    const parsedValue = parseInt(value, 10);\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n    return parsedValue;\n  },\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the presentationTime.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTime\n   */\n  presentationTime(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nconst parseAttributes = el => {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n  return from(el.attributes).reduce((a, e) => {\n    const parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\nconst keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime',\n  // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme\n  'urn:mpeg:dash:mp4protection:2011': 'mp4protection'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {Object[]} references\n *        List of objects containing the reference URL as well as its attributes\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {Object[]}\n *         List of objects with resolved urls and attributes\n */\n\nconst buildBaseUrls = (references, baseUrlElements) => {\n  if (!baseUrlElements.length) {\n    return references;\n  }\n  return flatten(references.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      const initialBaseUrl = getContent(baseUrlElement);\n      const resolvedBaseUrl = resolveUrl(reference.baseUrl, initialBaseUrl);\n      const finalBaseUrl = merge(parseAttributes(baseUrlElement), {\n        baseUrl: resolvedBaseUrl\n      }); // If the URL is resolved, we want to get the serviceLocation from the reference\n      // assuming there is no serviceLocation on the initialBaseUrl\n\n      if (resolvedBaseUrl !== initialBaseUrl && !finalBaseUrl.serviceLocation && reference.serviceLocation) {\n        finalBaseUrl.serviceLocation = reference.serviceLocation;\n      }\n      return finalBaseUrl;\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nconst getSegmentInformation = adaptationSet => {\n  const segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  const segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  const segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(s => merge({\n    tag: 'SegmentURL'\n  }, parseAttributes(s)));\n  const segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  const segmentTimelineParentNode = segmentList || segmentTemplate;\n  const segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  const segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  const segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  const template = segmentTemplate && parseAttributes(segmentTemplate);\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n  const segmentInfo = {\n    template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(s => parseAttributes(s)),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(key => {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {Object[]} adaptationSetBaseUrls\n *        List of objects containing resolved base URLs and attributes\n *        inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nconst inheritBaseUrls = (adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) => representation => {\n  const repBaseUrlElements = findChildren(representation, 'BaseURL');\n  const repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n  const attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n  const representationSegmentInfo = getSegmentInformation(representation);\n  return repBaseUrls.map(baseUrl => {\n    return {\n      segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n      attributes: merge(attributes, baseUrl)\n    };\n  });\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nconst generateKeySystemInformation = contentProtectionNodes => {\n  return contentProtectionNodes.reduce((acc, node) => {\n    const attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n\n    if (attributes.schemeIdUri) {\n      attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n    }\n    const keySystem = keySystemsMap[attributes.schemeIdUri];\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes\n      };\n      const psshNode = findChildren(node, 'cenc:pssh')[0];\n      if (psshNode) {\n        const pssh = getContent(psshNode);\n        acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\n      }\n    }\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\nconst parseCaptionServiceMetadata = service => {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    const values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(value => {\n      let channel;\n      let language; // default language to value\n\n      language = value;\n      if (/^CC\\d=/.test(value)) {\n        [channel, language] = value.split('=');\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n      return {\n        channel,\n        language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    const values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(value => {\n      const flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n      if (/=/.test(value)) {\n        const [channel, opts = ''] = value.split('=');\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(opt => {\n          const [name, val] = opt.split(':');\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n      return flags;\n    });\n  }\n};\n/**\n * A map callback that will parse all event stream data for a collection of periods\n * DASH ISO_IEC_23009 5.10.2.2\n * https://dashif-documents.azurewebsites.net/Events/master/event.html#mpd-event-timing\n *\n * @param {PeriodInformation} period object containing necessary period information\n * @return a collection of parsed eventstream event objects\n */\n\nconst toEventStream = period => {\n  // get and flatten all EventStreams tags and parse attributes and children\n  return flatten(findChildren(period.node, 'EventStream').map(eventStream => {\n    const eventStreamAttributes = parseAttributes(eventStream);\n    const schemeIdUri = eventStreamAttributes.schemeIdUri; // find all Events per EventStream tag and map to return objects\n\n    return findChildren(eventStream, 'Event').map(event => {\n      const eventAttributes = parseAttributes(event);\n      const presentationTime = eventAttributes.presentationTime || 0;\n      const timescale = eventStreamAttributes.timescale || 1;\n      const duration = eventAttributes.duration || 0;\n      const start = presentationTime / timescale + period.attributes.start;\n      return {\n        schemeIdUri,\n        value: eventStreamAttributes.value,\n        id: eventAttributes.id,\n        start,\n        end: start + duration / timescale,\n        messageData: getContent(event) || eventAttributes.messageData,\n        contentEncoding: eventStreamAttributes.contentEncoding,\n        presentationTimeOffset: eventStreamAttributes.presentationTimeOffset || 0\n      };\n    });\n  }));\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {Object[]} periodBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nconst toRepresentations = (periodAttributes, periodBaseUrls, periodSegmentInfo) => adaptationSet => {\n  const adaptationSetAttributes = parseAttributes(adaptationSet);\n  const adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n  const role = findChildren(adaptationSet, 'Role')[0];\n  const roleAttributes = {\n    role: parseAttributes(role)\n  };\n  let attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n  const accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n  const captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n  if (captionServices) {\n    attrs = merge(attrs, {\n      captionServices\n    });\n  }\n  const label = findChildren(adaptationSet, 'Label')[0];\n  if (label && label.childNodes.length) {\n    const labelVal = label.childNodes[0].nodeValue.trim();\n    attrs = merge(attrs, {\n      label: labelVal\n    });\n  }\n  const contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n  if (Object.keys(contentProtection).length) {\n    attrs = merge(attrs, {\n      contentProtection\n    });\n  }\n  const segmentInfo = getSegmentInformation(adaptationSet);\n  const representations = findChildren(adaptationSet, 'Representation');\n  const adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n  return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n  * @param {Object[]} mpdBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nconst toAdaptationSets = (mpdAttributes, mpdBaseUrls) => (period, index) => {\n  const periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n  const periodAttributes = merge(mpdAttributes, {\n    periodStart: period.attributes.start\n  });\n  if (typeof period.attributes.duration === 'number') {\n    periodAttributes.periodDuration = period.attributes.duration;\n  }\n  const adaptationSets = findChildren(period.node, 'AdaptationSet');\n  const periodSegmentInfo = getSegmentInformation(period.node);\n  return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n};\n/**\n * Tranforms an array of content steering nodes into an object\n * containing CDN content steering information from the MPD manifest.\n *\n * For more information on the DASH spec for Content Steering parsing, see:\n * https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\n *\n * @param {Node[]} contentSteeringNodes\n *        Content steering nodes\n * @param {Function} eventHandler\n *        The event handler passed into the parser options to handle warnings\n * @return {Object}\n *        Object containing content steering data\n */\n\nconst generateContentSteeringInformation = (contentSteeringNodes, eventHandler) => {\n  // If there are more than one ContentSteering tags, throw an error\n  if (contentSteeringNodes.length > 1) {\n    eventHandler({\n      type: 'warn',\n      message: 'The MPD manifest should contain no more than one ContentSteering tag'\n    });\n  } // Return a null value if there are no ContentSteering tags\n\n  if (!contentSteeringNodes.length) {\n    return null;\n  }\n  const infoFromContentSteeringTag = merge({\n    serverURL: getContent(contentSteeringNodes[0])\n  }, parseAttributes(contentSteeringNodes[0])); // Converts `queryBeforeStart` to a boolean, as well as setting the default value\n  // to `false` if it doesn't exist\n\n  infoFromContentSteeringTag.queryBeforeStart = infoFromContentSteeringTag.queryBeforeStart === 'true';\n  return infoFromContentSteeringTag;\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nconst getPeriodStart = ({\n  attributes,\n  priorPeriodAttributes,\n  mpdType\n}) => {\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nconst inheritAttributes = (mpd, options = {}) => {\n  const {\n    manifestUri = '',\n    NOW = Date.now(),\n    clientOffset = 0,\n    // TODO: For now, we are expecting an eventHandler callback function\n    // to be passed into the mpd parser as an option.\n    // In the future, we should enable stream parsing by using the Stream class from vhs-utils.\n    // This will support new features including a standardized event handler.\n    // See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.\n    // https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9\n    eventHandler = function () {}\n  } = options;\n  const periodNodes = findChildren(mpd, 'Period');\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n  const locations = findChildren(mpd, 'Location');\n  const mpdAttributes = parseAttributes(mpd);\n  const mpdBaseUrls = buildBaseUrls([{\n    baseUrl: manifestUri\n  }], findChildren(mpd, 'BaseURL'));\n  const contentSteeringNodes = findChildren(mpd, 'ContentSteering'); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n  const periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach((node, index) => {\n    const attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    const priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node,\n      attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    contentSteeringInfo: generateContentSteeringInformation(contentSteeringNodes, eventHandler),\n    // TODO: There are occurences where this `representationInfo` array contains undesired\n    // duplicates. This generally occurs when there are multiple BaseURL nodes that are\n    // direct children of the MPD node. When we attempt to resolve URLs from a combination of the\n    // parent BaseURL and a child BaseURL, and the value does not resolve,\n    // we end up returning the child BaseURL multiple times.\n    // We need to determine a way to remove these duplicates in a safe way.\n    // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls))),\n    eventStream: flatten(periods.map(toEventStream))\n  };\n};\nconst stringToMpdXml = manifestString => {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n  const parser = new DOMParser();\n  let xml;\n  let mpd;\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throws on invalid xml\n  }\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nconst parseUTCTimingScheme = mpd => {\n  const UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n  if (!UTCTimingNode) {\n    return null;\n  }\n  const attributes = parseAttributes(UTCTimingNode);\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n  return attributes;\n};\nconst VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nconst parse = (manifestString, options = {}) => {\n  const parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  const playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    contentSteering: parsedManifestInfo.contentSteeringInfo,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest,\n    eventStream: parsedManifestInfo.eventStream\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nconst parseUTCTiming = manifestString => parseUTCTimingScheme(stringToMpdXml(manifestString));\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };","map":{"version":3,"names":["resolveUrl","window","forEachMediaGroup","decodeB64ToUint8Array","DOMParser","version","isObject","obj","merge","objects","reduce","result","source","Object","keys","forEach","key","Array","isArray","concat","values","o","map","k","range","start","end","i","push","flatten","lists","x","y","from","list","length","findIndexes","l","a","e","union","keyFunction","acc","el","errors","INVALID_NUMBER_OF_PERIOD","INVALID_NUMBER_OF_CONTENT_STEERING","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","urlTypeToSegment","baseUrl","indexRange","segment","uri","resolvedUri","rangeStr","ranges","split","startRange","BigInt","parseInt","endRange","Number","MAX_SAFE_INTEGER","byterange","offset","byteRangeToString","parseEndNumber","endNumber","isNaN","segmentRange","static","attributes","duration","timescale","sourceDuration","periodDuration","segmentDuration","dynamic","NOW","clientOffset","availabilityStartTime","periodStart","minimumUpdatePeriod","timeShiftBufferDepth","Infinity","now","periodStartWC","periodEndWC","segmentCount","Math","ceil","availableStart","floor","availableEnd","max","min","toSegments","number","startNumber","timeline","time","parseByDuration","type","segments","index","sectionDuration","segmentsFromBase","initialization","presentationTime","Error","initSegment","sourceURL","segmentTimeInfo","addSidxSegmentsToPlaylist$1","playlist","sidx","sidxByteRange","sidxEnd","mediaReferences","references","filter","r","referenceType","endList","mediaSequence","startIndex","firstOffset","reference","size","referencedSize","subsegmentDuration","endIndex","SUPPORTED_MEDIA_TYPES","TIME_FUDGE","getUniqueTimelineStarts","timelineStarts","sort","b","findPlaylistWithName","playlists","name","NAME","getMediaGroupPlaylists","manifest","mediaGroupPlaylists","properties","group","label","updateMediaSequenceForPlaylist","updateSequenceNumbers","oldPlaylists","newPlaylists","discontinuitySequence","findIndex","oldPlaylist","firstNewSegment","oldMatchingSegmentIndex","oldSegment","abs","discontinuity","discontinuityStarts","unshift","oldMatchingSegment","positionManifestOnTimeline","oldManifest","newManifest","generateSidxKey","mergeDiscontiguousPlaylists","playlistsByBaseUrl","cur","allPlaylists","playlistGroup","mergedPlaylists","id","lang","contentProtection","addSidxSegmentsToPlaylist","sidxMapping","sidxKey","sidxMatch","addSidxSegmentsToPlaylists","formatAudioPlaylist","isAudioOnly","BANDWIDTH","bandwidth","CODECS","codecs","targetDuration","serviceLocation","AUDIO","SUBTITLES","formatVttPlaylist","m3u8Attributes","vttPlaylist","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","role","value","language","roleLabel","autoselect","default","formatted","firstLabel","organizeVttPlaylists","organizeCaptionServices","captionServices","svcObj","svc","service","channel","instreamId","hasOwnProperty","aspectRatio","easyReader","formatVideoPlaylist","RESOLUTION","width","height","frameRate","videoOnly","mimeType","contentType","audioOnly","vttOnly","addMediaSequenceValues","flattenMediaGroupPlaylists","mediaGroupObject","labelContents","toM3u8","dashPlaylists","locations","contentSteering","previousManifest","eventStream","suggestedPresentationDelay","videoPlaylists","audioPlaylists","vttPlaylists","captions","Boolean","allowCache","mediaGroups","VIDEO","organizedAudioGroup","organizedVttGroup","playlistTimelineStarts","audio","subs","cc","getLiveRValue","parseByTimeline","segmentTimeline","media","sIndex","S","d","repeat","segmentTime","t","count","nextS","indexOf","identifierPattern","identifierReplacement","match","identifier","format","join","constructTemplateUrl","url","replace","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","Time","presentationTimeOffset","SegmentURLToSegmentObject","segmentUrl","mediaRange","segmentsFromList","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","segmentInfo","segmentAttributes","segmentsFn","template","base","segmentsInfo","toPlaylists","representations","findChildren","element","childNodes","tagName","getContent","textContent","trim","parseDivisionValue","parseFloat","prev","current","parseDuration","str","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","exec","year","month","day","hour","minute","second","slice","parseDate","dateRegex","test","Date","parse","parsers","mediaPresentationDuration","parsedValue","DEFAULT","parseAttributes","parseFn","keySystemsMap","buildBaseUrls","baseUrlElements","baseUrlElement","initialBaseUrl","resolvedBaseUrl","finalBaseUrl","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","tag","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","node","schemeIdUri","toLowerCase","keySystem","psshNode","pssh","parseCaptionServiceMetadata","flags","undefined","opts","opt","val","toEventStream","period","eventStreamAttributes","event","eventAttributes","messageData","contentEncoding","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","attrs","accessibility","labelVal","nodeValue","toAdaptationSets","mpdAttributes","mpdBaseUrls","adaptationSets","generateContentSteeringInformation","contentSteeringNodes","eventHandler","message","infoFromContentSteeringTag","serverURL","queryBeforeStart","getPeriodStart","priorPeriodAttributes","mpdType","inheritAttributes","mpd","options","manifestUri","periodNodes","periods","priorPeriod","contentSteeringInfo","representationInfo","stringToMpdXml","manifestString","parser","xml","parseFromString","documentElement","getElementsByTagName","parseUTCTimingScheme","UTCTimingNode","method","VERSION","parsedManifestInfo","parseUTCTiming"],"sources":["/Users/mihailbaleev/Documents/GitHub/signal-BIT/signal/node_modules/mpd-parser/dist/mpd-parser.es.js"],"sourcesContent":["/*! @name mpd-parser @version 1.3.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\n\nvar version = \"1.3.0\";\n\nconst isObject = obj => {\n  return !!obj && typeof obj === 'object';\n};\n\nconst merge = (...objects) => {\n  return objects.reduce((result, source) => {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(key => {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nconst values = o => Object.keys(o).map(k => o[k]);\n\nconst range = (start, end) => {\n  const result = [];\n\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\nconst flatten = lists => lists.reduce((x, y) => x.concat(y), []);\nconst from = list => {\n  if (!list.length) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\nconst findIndexes = (l, key) => l.reduce((a, e, i) => {\n  if (e[key]) {\n    a.push(i);\n  }\n\n  return a;\n}, []);\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nconst union = (lists, keyFunction) => {\n  return values(lists.reduce((acc, list) => {\n    list.forEach(el => {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  INVALID_NUMBER_OF_CONTENT_STEERING: 'INVALID_NUMBER_OF_CONTENT_STEERING',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nconst urlTypeToSegment = ({\n  baseUrl = '',\n  source = '',\n  range = '',\n  indexRange = ''\n}) => {\n  const segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    const rangeStr = range ? range : indexRange;\n    const ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    let startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    let endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n\n    let length;\n\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n\n    segment.byterange = {\n      length,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\nconst byteRangeToString = byterange => {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  let endRange;\n\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n\n  return `${byterange.offset}-${endRange}`;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nconst parseEndNumber = endNumber => {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nconst segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static(attributes) {\n    const {\n      duration,\n      timescale = 1,\n      sourceDuration,\n      periodDuration\n    } = attributes;\n    const endNumber = parseEndNumber(attributes.endNumber);\n    const segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic(attributes) {\n    const {\n      NOW,\n      clientOffset,\n      availabilityStartTime,\n      timescale = 1,\n      duration,\n      periodStart = 0,\n      minimumUpdatePeriod = 0,\n      timeShiftBufferDepth = Infinity\n    } = attributes;\n    const endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    const now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    const periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    const periodEndWC = now + minimumUpdatePeriod;\n    const periodDuration = periodEndWC - periodStartWC;\n    const segmentCount = Math.ceil(periodDuration * timescale / duration);\n    const availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    const availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nconst toSegments = attributes => number => {\n  const {\n    duration,\n    timescale = 1,\n    periodStart,\n    startNumber = 1\n  } = attributes;\n  return {\n    number: startNumber + number,\n    duration: duration / timescale,\n    timeline: periodStart,\n    time: number * duration\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseByDuration = attributes => {\n  const {\n    type,\n    duration,\n    timescale = 1,\n    periodDuration,\n    sourceDuration\n  } = attributes;\n  const {\n    start,\n    end\n  } = segmentRange[type](attributes);\n  const segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    const index = segments.length - 1; // section is either a period or the full source\n\n    const sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nconst segmentsFromBase = attributes => {\n  const {\n    baseUrl,\n    initialization = {},\n    sourceDuration,\n    indexRange = '',\n    periodStart,\n    presentationTime,\n    number = 0,\n    duration\n  } = attributes; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  const initSegment = urlTypeToSegment({\n    baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  const segment = urlTypeToSegment({\n    baseUrl,\n    source: baseUrl,\n    indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    const segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nconst addSidxSegmentsToPlaylist$1 = (playlist, sidx, baseUrl) => {\n  // Retain init segment information\n  const initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  const sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  const timeline = playlist.timeline || 0;\n  const sidxByteRange = playlist.sidx.byterange;\n  const sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  const timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  const mediaReferences = sidx.references.filter(r => r.referenceType !== 1);\n  const segments = [];\n  const type = playlist.endList ? 'static' : 'dynamic';\n  const periodStart = playlist.sidx.timeline;\n  let presentationTime = periodStart;\n  let number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  let startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n\n  for (let i = 0; i < mediaReferences.length; i++) {\n    const reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    const size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    const duration = reference.subsegmentDuration; // should be an inclusive range\n\n    let endIndex; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n\n    const indexRange = `${startIndex}-${endIndex}`;\n    const attributes = {\n      baseUrl,\n      timescale,\n      timeline,\n      periodStart,\n      presentationTime,\n      number,\n      duration,\n      sourceDuration,\n      indexRange,\n      type\n    };\n    const segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n\n    presentationTime += duration / timescale;\n    number++;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nconst SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nconst TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nconst getUniqueTimelineStarts = timelineStarts => {\n  return union(timelineStarts, ({\n    timeline\n  }) => timeline).sort((a, b) => a.timeline > b.timeline ? 1 : -1);\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nconst findPlaylistWithName = (playlists, name) => {\n  for (let i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nconst getMediaGroupPlaylists = manifest => {\n  let mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, (properties, type, group, label) => {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nconst updateMediaSequenceForPlaylist = ({\n  playlist,\n  mediaSequence\n}) => {\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach((segment, index) => {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nconst updateSequenceNumbers = ({\n  oldPlaylists,\n  newPlaylists,\n  timelineStarts\n}) => {\n  newPlaylists.forEach(playlist => {\n    playlist.discontinuitySequence = timelineStarts.findIndex(function ({\n      timeline\n    }) {\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    const oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n\n    const firstNewSegment = playlist.segments[0];\n    const oldMatchingSegmentIndex = oldPlaylist.segments.findIndex(function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n\n    const oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n\n    updateMediaSequenceForPlaylist({\n      playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nconst positionManifestOnTimeline = ({\n  oldManifest,\n  newManifest\n}) => {\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  const oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  const newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists,\n    newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\n\nconst generateSidxKey = sidx => sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n\nconst mergeDiscontiguousPlaylists = playlists => {\n  // Break out playlists into groups based on their baseUrl\n  const playlistsByBaseUrl = playlists.reduce(function (acc, cur) {\n    if (!acc[cur.attributes.baseUrl]) {\n      acc[cur.attributes.baseUrl] = [];\n    }\n\n    acc[cur.attributes.baseUrl].push(cur);\n    return acc;\n  }, {});\n  let allPlaylists = [];\n  Object.values(playlistsByBaseUrl).forEach(playlistGroup => {\n    const mergedPlaylists = values(playlistGroup.reduce((acc, playlist) => {\n      // assuming playlist IDs are the same across periods\n      // TODO: handle multiperiod where representation sets are not the same\n      // across periods\n      const name = playlist.attributes.id + (playlist.attributes.lang || '');\n\n      if (!acc[name]) {\n        // First Period\n        acc[name] = playlist;\n        acc[name].attributes.timelineStarts = [];\n      } else {\n        // Subsequent Periods\n        if (playlist.segments) {\n          // first segment of subsequent periods signal a discontinuity\n          if (playlist.segments[0]) {\n            playlist.segments[0].discontinuity = true;\n          }\n\n          acc[name].segments.push(...playlist.segments);\n        } // bubble up contentProtection, this assumes all DRM content\n        // has the same contentProtection\n\n\n        if (playlist.attributes.contentProtection) {\n          acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n        }\n      }\n\n      acc[name].attributes.timelineStarts.push({\n        // Although they represent the same number, it's important to have both to make it\n        // compatible with HLS potentially having a similar attribute.\n        start: playlist.attributes.periodStart,\n        timeline: playlist.attributes.periodStart\n      });\n      return acc;\n    }, {}));\n    allPlaylists = allPlaylists.concat(mergedPlaylists);\n  });\n  return allPlaylists.map(playlist => {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\n\nconst addSidxSegmentsToPlaylist = (playlist, sidxMapping) => {\n  const sidxKey = generateSidxKey(playlist.sidx);\n  const sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\nconst addSidxSegmentsToPlaylists = (playlists, sidxMapping = {}) => {\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (const i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\nconst formatAudioPlaylist = ({\n  attributes,\n  segments,\n  sidx,\n  mediaSequence,\n  discontinuitySequence,\n  discontinuityStarts\n}, isAudioOnly) => {\n  const playlist = {\n    attributes: {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs,\n      ['PROGRAM-ID']: 1\n    },\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuitySequence,\n    discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence,\n    segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\nconst formatVttPlaylist = ({\n  attributes,\n  segments,\n  mediaSequence,\n  discontinuityStarts,\n  discontinuitySequence\n}) => {\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  const m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth,\n    ['PROGRAM-ID']: 1\n  };\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  const vttPlaylist = {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts,\n    discontinuitySequence,\n    mediaSequence,\n    segments\n  };\n\n  if (attributes.serviceLocation) {\n    vttPlaylist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n\n  return vttPlaylist;\n};\nconst organizeAudioPlaylists = (playlists, sidxMapping = {}, isAudioOnly = false) => {\n  let mainPlaylist;\n  const formattedPlaylists = playlists.reduce((a, playlist) => {\n    const role = playlist.attributes.role && playlist.attributes.role.value || '';\n    const language = playlist.attributes.lang || '';\n    let label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      const roleLabel = role ? ` (${role})` : '';\n      label = `${playlist.attributes.lang}${roleLabel}`;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    const formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    const firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\nconst organizeVttPlaylists = (playlists, sidxMapping = {}) => {\n  return playlists.reduce((a, playlist) => {\n    const label = playlist.attributes.label || playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nconst organizeCaptionServices = captionServices => captionServices.reduce((svcObj, svc) => {\n  if (!svc) {\n    return svcObj;\n  }\n\n  svc.forEach(service => {\n    const {\n      channel,\n      language\n    } = service;\n    svcObj[language] = {\n      autoselect: false,\n      default: false,\n      instreamId: channel,\n      language\n    };\n\n    if (service.hasOwnProperty('aspectRatio')) {\n      svcObj[language].aspectRatio = service.aspectRatio;\n    }\n\n    if (service.hasOwnProperty('easyReader')) {\n      svcObj[language].easyReader = service.easyReader;\n    }\n\n    if (service.hasOwnProperty('3D')) {\n      svcObj[language]['3D'] = service['3D'];\n    }\n  });\n  return svcObj;\n}, {});\n\nconst formatVideoPlaylist = ({\n  attributes,\n  segments,\n  sidx,\n  discontinuityStarts\n}) => {\n  const playlist = {\n    attributes: {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth,\n      ['PROGRAM-ID']: 1\n    },\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments\n  };\n\n  if (attributes.frameRate) {\n    playlist.attributes['FRAME-RATE'] = attributes.frameRate;\n  }\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nconst videoOnly = ({\n  attributes\n}) => attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n\nconst audioOnly = ({\n  attributes\n}) => attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n\nconst vttOnly = ({\n  attributes\n}) => attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\n\nconst addMediaSequenceValues = (playlists, timelineStarts) => {\n  // increment all segments sequentially\n  playlists.forEach(playlist => {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = timelineStarts.findIndex(function ({\n      timeline\n    }) {\n      return timeline === playlist.timeline;\n    });\n\n    if (!playlist.segments) {\n      return;\n    }\n\n    playlist.segments.forEach((segment, index) => {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nconst flattenMediaGroupPlaylists = mediaGroupObject => {\n  if (!mediaGroupObject) {\n    return [];\n  }\n\n  return Object.keys(mediaGroupObject).reduce((acc, label) => {\n    const labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nconst toM3u8 = ({\n  dashPlaylists,\n  locations,\n  contentSteering,\n  sidxMapping = {},\n  previousManifest,\n  eventStream\n}) => {\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  const {\n    sourceDuration: duration,\n    type,\n    suggestedPresentationDelay,\n    minimumUpdatePeriod\n  } = dashPlaylists[0].attributes;\n  const videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  const audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  const vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  const captions = dashPlaylists.map(playlist => playlist.attributes.captionServices).filter(Boolean);\n  const manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: {\n      AUDIO: {},\n      VIDEO: {},\n      ['CLOSED-CAPTIONS']: {},\n      SUBTITLES: {}\n    },\n    uri: '',\n    duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (contentSteering) {\n    manifest.contentSteering = contentSteering;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  if (eventStream && eventStream.length > 0) {\n    manifest.eventStream = eventStream;\n  }\n\n  const isAudioOnly = manifest.playlists.length === 0;\n  const organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  const organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  const formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  const playlistTimelineStarts = formattedPlaylists.map(({\n    timelineStarts\n  }) => timelineStarts);\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nconst getLiveRValue = (attributes, time, duration) => {\n  const {\n    NOW,\n    clientOffset,\n    availabilityStartTime,\n    timescale = 1,\n    periodStart = 0,\n    minimumUpdatePeriod = 0\n  } = attributes;\n  const now = (NOW + clientOffset) / 1000;\n  const periodStartWC = availabilityStartTime + periodStart;\n  const periodEndWC = now + minimumUpdatePeriod;\n  const periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nconst parseByTimeline = (attributes, segmentTimeline) => {\n  const {\n    type,\n    minimumUpdatePeriod = 0,\n    media = '',\n    sourceDuration,\n    timescale = 1,\n    startNumber = 1,\n    periodStart: timeline\n  } = attributes;\n  const segments = [];\n  let time = -1;\n\n  for (let sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    const S = segmentTimeline[sIndex];\n    const duration = S.d;\n    const repeat = S.r || 0;\n    const segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    let count;\n\n    if (repeat < 0) {\n      const nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    const end = startNumber + segments.length + count;\n    let number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number,\n        duration: duration / timescale,\n        time,\n        timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nconst identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nconst identifierReplacement = values => (match, identifier, format, width) => {\n  if (match === '$$') {\n    // escape sequence\n    return '$';\n  }\n\n  if (typeof values[identifier] === 'undefined') {\n    return match;\n  }\n\n  const value = '' + values[identifier];\n\n  if (identifier === 'RepresentationID') {\n    // Format tag shall not be present with RepresentationID\n    return value;\n  }\n\n  if (!format) {\n    width = 1;\n  } else {\n    width = parseInt(width, 10);\n  }\n\n  if (value.length >= width) {\n    return value;\n  }\n\n  return `${new Array(width - value.length + 1).join('0')}${value}`;\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nconst constructTemplateUrl = (url, values) => url.replace(identifierPattern, identifierReplacement(values));\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseTemplateInfo = (attributes, segmentTimeline) => {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nconst segmentsFromTemplate = (attributes, segmentTimeline) => {\n  const templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  const {\n    initialization = {\n      sourceURL: '',\n      range: ''\n    }\n  } = attributes;\n  const mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  const segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(segment => {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    const uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    const presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    const presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    const map = {\n      uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nconst SegmentURLToSegmentObject = (attributes, segmentUrl) => {\n  const {\n    baseUrl,\n    initialization = {}\n  } = attributes;\n  const initSegment = urlTypeToSegment({\n    baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  const segment = urlTypeToSegment({\n    baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nconst segmentsFromList = (attributes, segmentTimeline) => {\n  const {\n    duration,\n    segmentUrls = [],\n    periodStart\n  } = attributes; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  const segmentUrlMap = segmentUrls.map(segmentUrlObject => SegmentURLToSegmentObject(attributes, segmentUrlObject));\n  let segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  const segments = segmentTimeInfo.map((segmentTime, index) => {\n    if (segmentUrlMap[index]) {\n      const segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      const presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(segment => segment);\n  return segments;\n};\n\nconst generateSegments = ({\n  attributes,\n  segmentInfo\n}) => {\n  let segmentAttributes;\n  let segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  const segmentsInfo = {\n    attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  const segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    const {\n      duration,\n      timescale = 1\n    } = segmentAttributes;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce((max, segment) => {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\nconst toPlaylists = representations => representations.map(generateSegments);\n\nconst findChildren = (element, name) => from(element.childNodes).filter(({\n  tagName\n}) => tagName === name);\nconst getContent = element => element.textContent.trim();\n\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */\nconst parseDivisionValue = value => {\n  return parseFloat(value.split('/').reduce((prev, current) => prev / current));\n};\n\nconst parseDuration = str => {\n  const SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  const SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  const SECONDS_IN_DAY = 24 * 60 * 60;\n  const SECONDS_IN_HOUR = 60 * 60;\n  const SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  const durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  const match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  const [year, month, day, hour, minute, second] = match.slice(1);\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nconst parseDate = str => {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  const dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nconst parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */\n  frameRate(value) {\n    return parseDivisionValue(value);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration(value) {\n    const parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTime.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTime\n   */\n  presentationTime(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT(value) {\n    return value;\n  }\n\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nconst parseAttributes = el => {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce((a, e) => {\n    const parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nconst keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime',\n  // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme\n  'urn:mpeg:dash:mp4protection:2011': 'mp4protection'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {Object[]} references\n *        List of objects containing the reference URL as well as its attributes\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {Object[]}\n *         List of objects with resolved urls and attributes\n */\n\nconst buildBaseUrls = (references, baseUrlElements) => {\n  if (!baseUrlElements.length) {\n    return references;\n  }\n\n  return flatten(references.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      const initialBaseUrl = getContent(baseUrlElement);\n      const resolvedBaseUrl = resolveUrl(reference.baseUrl, initialBaseUrl);\n      const finalBaseUrl = merge(parseAttributes(baseUrlElement), {\n        baseUrl: resolvedBaseUrl\n      }); // If the URL is resolved, we want to get the serviceLocation from the reference\n      // assuming there is no serviceLocation on the initialBaseUrl\n\n      if (resolvedBaseUrl !== initialBaseUrl && !finalBaseUrl.serviceLocation && reference.serviceLocation) {\n        finalBaseUrl.serviceLocation = reference.serviceLocation;\n      }\n\n      return finalBaseUrl;\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nconst getSegmentInformation = adaptationSet => {\n  const segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  const segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  const segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(s => merge({\n    tag: 'SegmentURL'\n  }, parseAttributes(s)));\n  const segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  const segmentTimelineParentNode = segmentList || segmentTemplate;\n  const segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  const segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  const segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  const template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  const segmentInfo = {\n    template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(s => parseAttributes(s)),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(key => {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {Object[]} adaptationSetBaseUrls\n *        List of objects containing resolved base URLs and attributes\n *        inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nconst inheritBaseUrls = (adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) => representation => {\n  const repBaseUrlElements = findChildren(representation, 'BaseURL');\n  const repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n  const attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n  const representationSegmentInfo = getSegmentInformation(representation);\n  return repBaseUrls.map(baseUrl => {\n    return {\n      segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n      attributes: merge(attributes, baseUrl)\n    };\n  });\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nconst generateKeySystemInformation = contentProtectionNodes => {\n  return contentProtectionNodes.reduce((acc, node) => {\n    const attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n\n    if (attributes.schemeIdUri) {\n      attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n    }\n\n    const keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes\n      };\n      const psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        const pssh = getContent(psshNode);\n        acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nconst parseCaptionServiceMetadata = service => {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    const values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(value => {\n      let channel;\n      let language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        [channel, language] = value.split('=');\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel,\n        language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    const values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(value => {\n      const flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        const [channel, opts = ''] = value.split('=');\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(opt => {\n          const [name, val] = opt.split(':');\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * A map callback that will parse all event stream data for a collection of periods\n * DASH ISO_IEC_23009 5.10.2.2\n * https://dashif-documents.azurewebsites.net/Events/master/event.html#mpd-event-timing\n *\n * @param {PeriodInformation} period object containing necessary period information\n * @return a collection of parsed eventstream event objects\n */\n\nconst toEventStream = period => {\n  // get and flatten all EventStreams tags and parse attributes and children\n  return flatten(findChildren(period.node, 'EventStream').map(eventStream => {\n    const eventStreamAttributes = parseAttributes(eventStream);\n    const schemeIdUri = eventStreamAttributes.schemeIdUri; // find all Events per EventStream tag and map to return objects\n\n    return findChildren(eventStream, 'Event').map(event => {\n      const eventAttributes = parseAttributes(event);\n      const presentationTime = eventAttributes.presentationTime || 0;\n      const timescale = eventStreamAttributes.timescale || 1;\n      const duration = eventAttributes.duration || 0;\n      const start = presentationTime / timescale + period.attributes.start;\n      return {\n        schemeIdUri,\n        value: eventStreamAttributes.value,\n        id: eventAttributes.id,\n        start,\n        end: start + duration / timescale,\n        messageData: getContent(event) || eventAttributes.messageData,\n        contentEncoding: eventStreamAttributes.contentEncoding,\n        presentationTimeOffset: eventStreamAttributes.presentationTimeOffset || 0\n      };\n    });\n  }));\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {Object[]} periodBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nconst toRepresentations = (periodAttributes, periodBaseUrls, periodSegmentInfo) => adaptationSet => {\n  const adaptationSetAttributes = parseAttributes(adaptationSet);\n  const adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n  const role = findChildren(adaptationSet, 'Role')[0];\n  const roleAttributes = {\n    role: parseAttributes(role)\n  };\n  let attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n  const accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n  const captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n  if (captionServices) {\n    attrs = merge(attrs, {\n      captionServices\n    });\n  }\n\n  const label = findChildren(adaptationSet, 'Label')[0];\n\n  if (label && label.childNodes.length) {\n    const labelVal = label.childNodes[0].nodeValue.trim();\n    attrs = merge(attrs, {\n      label: labelVal\n    });\n  }\n\n  const contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n  if (Object.keys(contentProtection).length) {\n    attrs = merge(attrs, {\n      contentProtection\n    });\n  }\n\n  const segmentInfo = getSegmentInformation(adaptationSet);\n  const representations = findChildren(adaptationSet, 'Representation');\n  const adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n  return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n  * @param {Object[]} mpdBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nconst toAdaptationSets = (mpdAttributes, mpdBaseUrls) => (period, index) => {\n  const periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n  const periodAttributes = merge(mpdAttributes, {\n    periodStart: period.attributes.start\n  });\n\n  if (typeof period.attributes.duration === 'number') {\n    periodAttributes.periodDuration = period.attributes.duration;\n  }\n\n  const adaptationSets = findChildren(period.node, 'AdaptationSet');\n  const periodSegmentInfo = getSegmentInformation(period.node);\n  return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n};\n/**\n * Tranforms an array of content steering nodes into an object\n * containing CDN content steering information from the MPD manifest.\n *\n * For more information on the DASH spec for Content Steering parsing, see:\n * https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\n *\n * @param {Node[]} contentSteeringNodes\n *        Content steering nodes\n * @param {Function} eventHandler\n *        The event handler passed into the parser options to handle warnings\n * @return {Object}\n *        Object containing content steering data\n */\n\nconst generateContentSteeringInformation = (contentSteeringNodes, eventHandler) => {\n  // If there are more than one ContentSteering tags, throw an error\n  if (contentSteeringNodes.length > 1) {\n    eventHandler({\n      type: 'warn',\n      message: 'The MPD manifest should contain no more than one ContentSteering tag'\n    });\n  } // Return a null value if there are no ContentSteering tags\n\n\n  if (!contentSteeringNodes.length) {\n    return null;\n  }\n\n  const infoFromContentSteeringTag = merge({\n    serverURL: getContent(contentSteeringNodes[0])\n  }, parseAttributes(contentSteeringNodes[0])); // Converts `queryBeforeStart` to a boolean, as well as setting the default value\n  // to `false` if it doesn't exist\n\n  infoFromContentSteeringTag.queryBeforeStart = infoFromContentSteeringTag.queryBeforeStart === 'true';\n  return infoFromContentSteeringTag;\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nconst getPeriodStart = ({\n  attributes,\n  priorPeriodAttributes,\n  mpdType\n}) => {\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nconst inheritAttributes = (mpd, options = {}) => {\n  const {\n    manifestUri = '',\n    NOW = Date.now(),\n    clientOffset = 0,\n    // TODO: For now, we are expecting an eventHandler callback function\n    // to be passed into the mpd parser as an option.\n    // In the future, we should enable stream parsing by using the Stream class from vhs-utils.\n    // This will support new features including a standardized event handler.\n    // See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.\n    // https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9\n    eventHandler = function () {}\n  } = options;\n  const periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  const locations = findChildren(mpd, 'Location');\n  const mpdAttributes = parseAttributes(mpd);\n  const mpdBaseUrls = buildBaseUrls([{\n    baseUrl: manifestUri\n  }], findChildren(mpd, 'BaseURL'));\n  const contentSteeringNodes = findChildren(mpd, 'ContentSteering'); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  const periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach((node, index) => {\n    const attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    const priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node,\n      attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    contentSteeringInfo: generateContentSteeringInformation(contentSteeringNodes, eventHandler),\n    // TODO: There are occurences where this `representationInfo` array contains undesired\n    // duplicates. This generally occurs when there are multiple BaseURL nodes that are\n    // direct children of the MPD node. When we attempt to resolve URLs from a combination of the\n    // parent BaseURL and a child BaseURL, and the value does not resolve,\n    // we end up returning the child BaseURL multiple times.\n    // We need to determine a way to remove these duplicates in a safe way.\n    // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls))),\n    eventStream: flatten(periods.map(toEventStream))\n  };\n};\n\nconst stringToMpdXml = manifestString => {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  const parser = new DOMParser();\n  let xml;\n  let mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throws on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nconst parseUTCTimingScheme = mpd => {\n  const UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  const attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nconst VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nconst parse = (manifestString, options = {}) => {\n  const parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  const playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    contentSteering: parsedManifestInfo.contentSteeringInfo,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest,\n    eventStream: parsedManifestInfo.eventStream\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nconst parseUTCTiming = manifestString => parseUTCTimingScheme(stringToMpdXml(manifestString));\n\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };\n"],"mappings":"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GAAG,IAAI;EAChC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpH,mBAAmBA,CAACoH,KAAK,EAAE;IACzB,OAAO8G,aAAa,CAAC9G,KAAK,CAAC;EAC7B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsC,0BAA0BA,CAACtC,KAAK,EAAE;IAChC,OAAO8G,aAAa,CAAC9G,KAAK,CAAC;EAC7B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhG,IAAIA,CAACgG,KAAK,EAAE;IACV,OAAOA,KAAK;EACd,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEnH,oBAAoBA,CAACmH,KAAK,EAAE;IAC1B,OAAO8G,aAAa,CAAC9G,KAAK,CAAC;EAC7B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACElL,KAAKA,CAACkL,KAAK,EAAE;IACX,OAAO8G,aAAa,CAAC9G,KAAK,CAAC;EAC7B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,KAAKA,CAACpB,KAAK,EAAE;IACX,OAAO3I,QAAQ,CAAC2I,KAAK,EAAE,EAAE,CAAC;EAC5B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEqB,MAAMA,CAACrB,KAAK,EAAE;IACZ,OAAO3I,QAAQ,CAAC2I,KAAK,EAAE,EAAE,CAAC;EAC5B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEd,SAASA,CAACc,KAAK,EAAE;IACf,OAAO3I,QAAQ,CAAC2I,KAAK,EAAE,EAAE,CAAC;EAC5B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,SAASA,CAACtB,KAAK,EAAE;IACf,OAAO0G,kBAAkB,CAAC1G,KAAK,CAAC;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEpG,WAAWA,CAACoG,KAAK,EAAE;IACjB,OAAO3I,QAAQ,CAAC2I,KAAK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"},"metadata":{},"sourceType":"module","externalDependencies":[]}