{"ast":null,"code":"// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX = /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = URLToolkit;else if (typeof define === 'function' && define.amd) define([], function () {\n    return URLToolkit;\n  });else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;else root['URLToolkit'] = URLToolkit;\n})(this);","map":{"version":3,"names":["root","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","Error","path","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","fragment","baseURLPath","newPath","substring","lastIndexOf","url","parts","split","reverse","join","replace","length","exports","module","define","amd"],"sources":["/Users/mihailbaleev/Documents/GitHub/signal-BIT/signal/node_modules/url-toolkit/src/url-toolkit.js"],"sourcesContent":["// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}