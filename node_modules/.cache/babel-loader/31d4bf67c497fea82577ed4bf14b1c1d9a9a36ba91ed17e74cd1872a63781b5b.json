{"ast":null,"code":"import { toUint8, bytesMatch } from './byte-helpers.js';\nvar ID3 = toUint8([0x49, 0x44, 0x33]);\nexport var getId3Size = function getId3Size(bytes, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  bytes = toUint8(bytes);\n  var flags = bytes[offset + 5];\n  var returnSize = bytes[offset + 6] << 21 | bytes[offset + 7] << 14 | bytes[offset + 8] << 7 | bytes[offset + 9];\n  var footerPresent = (flags & 16) >> 4;\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\nexport var getId3Offset = function getId3Offset(bytes, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  bytes = toUint8(bytes);\n  if (bytes.length - offset < 10 || !bytesMatch(bytes, ID3, {\n    offset: offset\n  })) {\n    return offset;\n  }\n  offset += getId3Size(bytes, offset); // recursive check for id3 tags as some files\n  // have multiple ID3 tag sections even though\n  // they should not.\n\n  return getId3Offset(bytes, offset);\n};","map":{"version":3,"names":["toUint8","bytesMatch","ID3","getId3Size","bytes","offset","flags","returnSize","footerPresent","getId3Offset","length"],"sources":["/Users/mihailbaleev/Documents/GitHub/signal-BIT/signal/node_modules/@videojs/vhs-utils/es/id3-helpers.js"],"sourcesContent":["import { toUint8, bytesMatch } from './byte-helpers.js';\nvar ID3 = toUint8([0x49, 0x44, 0x33]);\nexport var getId3Size = function getId3Size(bytes, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  bytes = toUint8(bytes);\n  var flags = bytes[offset + 5];\n  var returnSize = bytes[offset + 6] << 21 | bytes[offset + 7] << 14 | bytes[offset + 8] << 7 | bytes[offset + 9];\n  var footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n\n  return returnSize + 10;\n};\nexport var getId3Offset = function getId3Offset(bytes, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  bytes = toUint8(bytes);\n\n  if (bytes.length - offset < 10 || !bytesMatch(bytes, ID3, {\n    offset: offset\n  })) {\n    return offset;\n  }\n\n  offset += getId3Size(bytes, offset); // recursive check for id3 tags as some files\n  // have multiple ID3 tag sections even though\n  // they should not.\n\n  return getId3Offset(bytes, offset);\n};"],"mappings":"AAAA,SAASA,OAAO,EAAEC,UAAU,QAAQ,mBAAmB;AACvD,IAAIC,GAAG,GAAGF,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACrC,OAAO,IAAIG,UAAU,GAAG,SAASA,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACzD,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IACrBA,MAAM,GAAG,CAAC;EACZ;EAEAD,KAAK,GAAGJ,OAAO,CAACI,KAAK,CAAC;EACtB,IAAIE,KAAK,GAAGF,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;EAC7B,IAAIE,UAAU,GAAGH,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,GAAGD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,GAAGD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAGD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;EAC/G,IAAIG,aAAa,GAAG,CAACF,KAAK,GAAG,EAAE,KAAK,CAAC;EAErC,IAAIE,aAAa,EAAE;IACjB,OAAOD,UAAU,GAAG,EAAE;EACxB;EAEA,OAAOA,UAAU,GAAG,EAAE;AACxB,CAAC;AACD,OAAO,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAACL,KAAK,EAAEC,MAAM,EAAE;EAC7D,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IACrBA,MAAM,GAAG,CAAC;EACZ;EAEAD,KAAK,GAAGJ,OAAO,CAACI,KAAK,CAAC;EAEtB,IAAIA,KAAK,CAACM,MAAM,GAAGL,MAAM,GAAG,EAAE,IAAI,CAACJ,UAAU,CAACG,KAAK,EAAEF,GAAG,EAAE;IACxDG,MAAM,EAAEA;EACV,CAAC,CAAC,EAAE;IACF,OAAOA,MAAM;EACf;EAEAA,MAAM,IAAIF,UAAU,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC,CAAC;EACrC;EACA;;EAEA,OAAOI,YAAY,CAACL,KAAK,EAAEC,MAAM,CAAC;AACpC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}