{"ast":null,"code":"import window from 'global/window';\nvar regexs = {\n  // to determine mime types\n  mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,\n  webm: /^(vp0?[89]|av0?1|opus|vorbis)/,\n  ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,\n  // to determine if a codec is audio or video\n  video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,\n  audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,\n  text: /^(stpp.ttml.im1t)/,\n  // mux.js support regex\n  muxerVideo: /^(avc0?1)/,\n  muxerAudio: /^(mp4a)/,\n  // match nothing as muxer does not support text right now.\n  // there cannot never be a character before the start of a string\n  // so this matches nothing.\n  muxerText: /a^/\n};\nvar mediaTypes = ['video', 'audio', 'text'];\nvar upperMediaTypes = ['Video', 'Audio', 'Text'];\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {string} codec\n *        Codec string to translate\n * @return {string}\n *         The translated codec string\n */\n\nexport var translateLegacyCodec = function translateLegacyCodec(codec) {\n  if (!codec) {\n    return codec;\n  }\n  return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n    var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n    var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n    return 'avc1.' + profileHex + '00' + avcLevelHex;\n  });\n};\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec strings with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {string[]} codecs\n *        An array of codec strings to translate\n * @return {string[]}\n *         The translated array of codec strings\n */\n\nexport var translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(translateLegacyCodec);\n};\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param {string} codecString\n *        The codec string\n * @return {string}\n *         The codec string with old apple-style codecs replaced\n *\n * @private\n */\n\nexport var mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n/**\n * @typedef {Object} ParsedCodecInfo\n * @property {number} codecCount\n *           Number of codecs parsed\n * @property {string} [videoCodec]\n *           Parsed video codec (if found)\n * @property {string} [videoObjectTypeIndicator]\n *           Video object type indicator (if found)\n * @property {string|null} audioProfile\n *           Audio profile\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified, the video codec and\n * object type indicator, and the audio profile.\n *\n * @param {string} [codecString]\n *        The codec string to parse\n * @return {ParsedCodecInfo}\n *         Parsed codec info\n */\n\nexport var parseCodecs = function parseCodecs(codecString) {\n  if (codecString === void 0) {\n    codecString = '';\n  }\n  var codecs = codecString.split(',');\n  var result = [];\n  codecs.forEach(function (codec) {\n    codec = codec.trim();\n    var codecType;\n    mediaTypes.forEach(function (name) {\n      var match = regexs[name].exec(codec.toLowerCase());\n      if (!match || match.length <= 1) {\n        return;\n      }\n      codecType = name; // maintain codec case\n\n      var type = codec.substring(0, match[1].length);\n      var details = codec.replace(type, '');\n      result.push({\n        type: type,\n        details: details,\n        mediaType: name\n      });\n    });\n    if (!codecType) {\n      result.push({\n        type: codec,\n        details: '',\n        mediaType: 'unknown'\n      });\n    }\n  });\n  return result;\n};\n/**\n * Returns a ParsedCodecInfo object for the default alternate audio playlist if there is\n * a default alternate audio playlist for the provided audio group.\n *\n * @param {Object} master\n *        The master playlist\n * @param {string} audioGroupId\n *        ID of the audio group for which to find the default codec info\n * @return {ParsedCodecInfo}\n *         Parsed codec info\n */\n\nexport var codecsFromDefault = function codecsFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n  if (!audioGroup) {\n    return null;\n  }\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n    if (audioType.default && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS);\n    }\n  }\n  return null;\n};\nexport var isVideoCodec = function isVideoCodec(codec) {\n  if (codec === void 0) {\n    codec = '';\n  }\n  return regexs.video.test(codec.trim().toLowerCase());\n};\nexport var isAudioCodec = function isAudioCodec(codec) {\n  if (codec === void 0) {\n    codec = '';\n  }\n  return regexs.audio.test(codec.trim().toLowerCase());\n};\nexport var isTextCodec = function isTextCodec(codec) {\n  if (codec === void 0) {\n    codec = '';\n  }\n  return regexs.text.test(codec.trim().toLowerCase());\n};\nexport var getMimeForCodec = function getMimeForCodec(codecString) {\n  if (!codecString || typeof codecString !== 'string') {\n    return;\n  }\n  var codecs = codecString.toLowerCase().split(',').map(function (c) {\n    return translateLegacyCodec(c.trim());\n  }); // default to video type\n\n  var type = 'video'; // only change to audio type if the only codec we have is\n  // audio\n\n  if (codecs.length === 1 && isAudioCodec(codecs[0])) {\n    type = 'audio';\n  } else if (codecs.length === 1 && isTextCodec(codecs[0])) {\n    // text uses application/<container> for now\n    type = 'application';\n  } // default the container to mp4\n\n  var container = 'mp4'; // every codec must be able to go into the container\n  // for that container to be the correct one\n\n  if (codecs.every(function (c) {\n    return regexs.mp4.test(c);\n  })) {\n    container = 'mp4';\n  } else if (codecs.every(function (c) {\n    return regexs.webm.test(c);\n  })) {\n    container = 'webm';\n  } else if (codecs.every(function (c) {\n    return regexs.ogg.test(c);\n  })) {\n    container = 'ogg';\n  }\n  return type + \"/\" + container + \";codecs=\\\"\" + codecString + \"\\\"\";\n};\nexport var browserSupportsCodec = function browserSupportsCodec(codecString) {\n  if (codecString === void 0) {\n    codecString = '';\n  }\n  return window.MediaSource && window.MediaSource.isTypeSupported && window.MediaSource.isTypeSupported(getMimeForCodec(codecString)) || false;\n};\nexport var muxerSupportsCodec = function muxerSupportsCodec(codecString) {\n  if (codecString === void 0) {\n    codecString = '';\n  }\n  return codecString.toLowerCase().split(',').every(function (codec) {\n    codec = codec.trim(); // any match is supported.\n\n    for (var i = 0; i < upperMediaTypes.length; i++) {\n      var type = upperMediaTypes[i];\n      if (regexs[\"muxer\" + type].test(codec)) {\n        return true;\n      }\n    }\n    return false;\n  });\n};\nexport var DEFAULT_AUDIO_CODEC = 'mp4a.40.2';\nexport var DEFAULT_VIDEO_CODEC = 'avc1.4d400d';","map":{"version":3,"names":["window","regexs","mp4","webm","ogg","video","audio","text","muxerVideo","muxerAudio","muxerText","mediaTypes","upperMediaTypes","translateLegacyCodec","codec","replace","orig","profile","avcLevel","profileHex","Number","toString","slice","avcLevelHex","translateLegacyCodecs","codecs","map","mapLegacyAvcCodecs","codecString","match","parseCodecs","split","result","forEach","trim","codecType","name","exec","toLowerCase","length","type","substring","details","push","mediaType","codecsFromDefault","master","audioGroupId","mediaGroups","AUDIO","audioGroup","audioType","default","playlists","attributes","CODECS","isVideoCodec","test","isAudioCodec","isTextCodec","getMimeForCodec","c","container","every","browserSupportsCodec","MediaSource","isTypeSupported","muxerSupportsCodec","i","DEFAULT_AUDIO_CODEC","DEFAULT_VIDEO_CODEC"],"sources":["/Users/mihailbaleev/Documents/GitHub/signal-BIT/signal/node_modules/@videojs/vhs-utils/es/codecs.js"],"sourcesContent":["import window from 'global/window';\nvar regexs = {\n  // to determine mime types\n  mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,\n  webm: /^(vp0?[89]|av0?1|opus|vorbis)/,\n  ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,\n  // to determine if a codec is audio or video\n  video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,\n  audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,\n  text: /^(stpp.ttml.im1t)/,\n  // mux.js support regex\n  muxerVideo: /^(avc0?1)/,\n  muxerAudio: /^(mp4a)/,\n  // match nothing as muxer does not support text right now.\n  // there cannot never be a character before the start of a string\n  // so this matches nothing.\n  muxerText: /a^/\n};\nvar mediaTypes = ['video', 'audio', 'text'];\nvar upperMediaTypes = ['Video', 'Audio', 'Text'];\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {string} codec\n *        Codec string to translate\n * @return {string}\n *         The translated codec string\n */\n\nexport var translateLegacyCodec = function translateLegacyCodec(codec) {\n  if (!codec) {\n    return codec;\n  }\n\n  return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n    var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n    var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n    return 'avc1.' + profileHex + '00' + avcLevelHex;\n  });\n};\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec strings with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {string[]} codecs\n *        An array of codec strings to translate\n * @return {string[]}\n *         The translated array of codec strings\n */\n\nexport var translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(translateLegacyCodec);\n};\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param {string} codecString\n *        The codec string\n * @return {string}\n *         The codec string with old apple-style codecs replaced\n *\n * @private\n */\n\nexport var mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n/**\n * @typedef {Object} ParsedCodecInfo\n * @property {number} codecCount\n *           Number of codecs parsed\n * @property {string} [videoCodec]\n *           Parsed video codec (if found)\n * @property {string} [videoObjectTypeIndicator]\n *           Video object type indicator (if found)\n * @property {string|null} audioProfile\n *           Audio profile\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified, the video codec and\n * object type indicator, and the audio profile.\n *\n * @param {string} [codecString]\n *        The codec string to parse\n * @return {ParsedCodecInfo}\n *         Parsed codec info\n */\n\nexport var parseCodecs = function parseCodecs(codecString) {\n  if (codecString === void 0) {\n    codecString = '';\n  }\n\n  var codecs = codecString.split(',');\n  var result = [];\n  codecs.forEach(function (codec) {\n    codec = codec.trim();\n    var codecType;\n    mediaTypes.forEach(function (name) {\n      var match = regexs[name].exec(codec.toLowerCase());\n\n      if (!match || match.length <= 1) {\n        return;\n      }\n\n      codecType = name; // maintain codec case\n\n      var type = codec.substring(0, match[1].length);\n      var details = codec.replace(type, '');\n      result.push({\n        type: type,\n        details: details,\n        mediaType: name\n      });\n    });\n\n    if (!codecType) {\n      result.push({\n        type: codec,\n        details: '',\n        mediaType: 'unknown'\n      });\n    }\n  });\n  return result;\n};\n/**\n * Returns a ParsedCodecInfo object for the default alternate audio playlist if there is\n * a default alternate audio playlist for the provided audio group.\n *\n * @param {Object} master\n *        The master playlist\n * @param {string} audioGroupId\n *        ID of the audio group for which to find the default codec info\n * @return {ParsedCodecInfo}\n *         Parsed codec info\n */\n\nexport var codecsFromDefault = function codecsFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n\n  if (!audioGroup) {\n    return null;\n  }\n\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n\n    if (audioType.default && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS);\n    }\n  }\n\n  return null;\n};\nexport var isVideoCodec = function isVideoCodec(codec) {\n  if (codec === void 0) {\n    codec = '';\n  }\n\n  return regexs.video.test(codec.trim().toLowerCase());\n};\nexport var isAudioCodec = function isAudioCodec(codec) {\n  if (codec === void 0) {\n    codec = '';\n  }\n\n  return regexs.audio.test(codec.trim().toLowerCase());\n};\nexport var isTextCodec = function isTextCodec(codec) {\n  if (codec === void 0) {\n    codec = '';\n  }\n\n  return regexs.text.test(codec.trim().toLowerCase());\n};\nexport var getMimeForCodec = function getMimeForCodec(codecString) {\n  if (!codecString || typeof codecString !== 'string') {\n    return;\n  }\n\n  var codecs = codecString.toLowerCase().split(',').map(function (c) {\n    return translateLegacyCodec(c.trim());\n  }); // default to video type\n\n  var type = 'video'; // only change to audio type if the only codec we have is\n  // audio\n\n  if (codecs.length === 1 && isAudioCodec(codecs[0])) {\n    type = 'audio';\n  } else if (codecs.length === 1 && isTextCodec(codecs[0])) {\n    // text uses application/<container> for now\n    type = 'application';\n  } // default the container to mp4\n\n\n  var container = 'mp4'; // every codec must be able to go into the container\n  // for that container to be the correct one\n\n  if (codecs.every(function (c) {\n    return regexs.mp4.test(c);\n  })) {\n    container = 'mp4';\n  } else if (codecs.every(function (c) {\n    return regexs.webm.test(c);\n  })) {\n    container = 'webm';\n  } else if (codecs.every(function (c) {\n    return regexs.ogg.test(c);\n  })) {\n    container = 'ogg';\n  }\n\n  return type + \"/\" + container + \";codecs=\\\"\" + codecString + \"\\\"\";\n};\nexport var browserSupportsCodec = function browserSupportsCodec(codecString) {\n  if (codecString === void 0) {\n    codecString = '';\n  }\n\n  return window.MediaSource && window.MediaSource.isTypeSupported && window.MediaSource.isTypeSupported(getMimeForCodec(codecString)) || false;\n};\nexport var muxerSupportsCodec = function muxerSupportsCodec(codecString) {\n  if (codecString === void 0) {\n    codecString = '';\n  }\n\n  return codecString.toLowerCase().split(',').every(function (codec) {\n    codec = codec.trim(); // any match is supported.\n\n    for (var i = 0; i < upperMediaTypes.length; i++) {\n      var type = upperMediaTypes[i];\n\n      if (regexs[\"muxer\" + type].test(codec)) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n};\nexport var DEFAULT_AUDIO_CODEC = 'mp4a.40.2';\nexport var DEFAULT_VIDEO_CODEC = 'avc1.4d400d';"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}